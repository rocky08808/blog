[{"title":"js基础面试题","date":"2022-04-22T04:04:06.000Z","url":"/blog/2022/04/22/jsInterview/","tags":[["javascript","/blog/tags/javascript/"],["干货","/blog/tags/%E5%B9%B2%E8%B4%A7/"]],"categories":[["javascript","/blog/categories/javascript/"]],"content":"1、undefined 和 null有什么区别？相同：它们是属于虚值，可以使用Boolean(value)或!!value将其转换为布尔值时，值为false区别：undefined：是未指定特定值的变量的默认值，或者函数默认返回值null：是“不代表任何值的值”。null是已明确定义给变量的值。 2、符号运算&amp;&amp;：可作为if短路运算，满足左边条件才执行右边语句||：可为变量赋值默认值+：快速将右边值转为数字类型!!：快速将右边值转为布尔值 3、什么是事件传播?事件传播有三个阶段：（1）捕获阶段：事件从 window 开始，然后向下到每个元素，直到到达目标元素。（2）目标阶段：事件已达到目标元素。（3）冒泡阶段：事件从目标元素冒泡，然后上升到每个元素，直到到达 window。 addEventListener方法具有第三个可选参数isCapture，默认值为false 当isCapture为false时，事件在冒泡阶段发生即从当前元素开始搜索并执行相同类型事件，直到window结束 当isCapture为true时，事件在捕获阶段发生即从window开始搜索并执行相同类型事件，直到当前元素4、event.preventDefault() 和 event.stopPropagation()方法之间有什么区别？ event.preventDefault() ：阻止元素默认事件 vent.stopPropagation()：阻止事件传播（冒泡和捕获）5、event.target 和event.currentTarget的区别 event.target：当前触发事件的元素 event.currentTarget：当前绑定事件的元素6、== 和 === 有什么区别 ==：一般比较，会转换后比较，比较值 ===：严格比较，比较类型和值，类型和值其中一个不同即为false7、什么是作用域？JavaScript 中的作用域是我们可以有效访问变量或函数的区域。JS 有三种类型的作用域：全局作用域、函数作用域和块作用域(ES6)。 全局作用域：在全局命名空间中声明的变量或函数位于全局作用域中，因此在代码中的任何地方都可以访问它们。 函数作用域：在函数中声明的变量、函数和参数可以在函数内部访问，但不能在函数外部访问。 块作用域：在块{}中声明的变量（let，const）只能在其中访问。 作用域也是一组用于查找变量的规则。如果变量在当前作用域中不存在，它将向外部作用域中查找并搜索，如果该变量不存在，它将再次查找直到到达全局作用域，如果找到，则可以使用它，否则引发错误，这种查找过程也称为作用域链。 8、什么是提升？提升：是用来描述变量和函数移动到其(全局或函数)作用域顶部的术语 为了理解提升，需要来了解一下执行上下文。执行上下文是当前正在执行的“代码环境”。执行上下文有两个阶段:编译和执行。编译：在此阶段，JS 引荐获取所有函数声明并将其提升到其作用域的顶部，以便我们稍后可以引用它们并获取所有变量声明（使用var关键字进行声明），还会为它们提供默认值：undefined。执行：在这个阶段中，它将值赋给之前提升的变量，并执行或调用函数(对象中的方法)。 注意：只有使用var声明的变量，或者函数声明才会被提升，相反，函数表达式或箭头函数，let和const声明的变量，这些都不会被提升。9、什么是闭包？闭包就是一个函数在声明时能够记住当前作用域、父函数作用域、及父函数作用域上的变量和参数的引用，直至通过作用域链上全局作用域，基本上闭包是在声明函数时创建的作用域。10、JavaScript 中的虚值是什么？ 简单的来说虚值就是是在转换为布尔值时变为 false 的值。11、’use strict’ 是干嘛用的？“use strict” 是 ES5 特性，它使我们的代码在函数或整个脚本中处于严格模式。严格模式帮助我们在代码的早期避免 bug，并为其添加限制。严格模式的一些限制： 变量必须声明后再使用 函数的参数不能有同名属性，否则报错 不能使用with语句 不能对只读属性赋值，否则报错 不能使用前缀 0 表示八进制数，否则报错 不能删除不可删除的属性，否则报错 不能删除变量delete prop，会报错，只能删除属性deleteglobal[prop] eval不能在它的外层作用域引入变量 eval和arguments不能被重新赋值 arguments不会自动反映函数参数的变化 不能使用arguments.callee 不能使用arguments.caller 禁止this指向全局对象 不能使用fn.caller和fn.arguments获取函数调用的堆栈 增加了保留字（比如protected、static和interface） 设立”严格模式”的目的，主要有以下几个： 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为; 消除代码运行的一些不安全之处，保证代码运行的安全； 提高编译器效率，增加运行速度； 为未来新版本的Javascript做好铺垫。12、JavaScript 中 this 值是什么？this指的是当前正在执行或调用该函数的对象的值。this值的变化取决于我们使用它的上下文和我们在哪里使用它。 箭头函数没有自己的 this apply和call可以改变this的指向 在全局作用域内声明的函数，对象内部方法中的匿名函数和内部函数的this具有默认值，该值指向window对象。13、什么是 IIFE，它的用途是什么？IIFE或立即调用的函数表达式是在创建或声明后将被调用或执行的函数。创建IIFE的语法是，将function (){}包裹在在括号()内，然后再用另一个括号()调用它，如：(function(){})() IIFE的一个主要作用是避免与全局作用域内的其他变量命名冲突或污染全局命名空间14、call、apply、bind的区别call和apply：调用一个指定this值的函数，call传的是参数列表，apply传的是数组bind：创建一个新的函数并指定this值，传参和call都是参数列表15、arguments 的对象是什么？arguments对象是函数中传递的参数值的集合。它是一个类似数组的对象，因为它有一个length属性，我们可以使用数组索引表示法arguments[1]来访问单个值，但它没有数组中的内置方法，如：forEach、reduce、filter和map 可以使用Array.prototype.slice将arguments对象转换成一个数组 箭头函数中没有arguments对象。16、ES6或ECMAScript 2015有哪些新特性？ 箭头函数 类 模板字符串 加强的对象字面量 对象解构 Promise 生成器 模块 Symbol 代理 Set 函数默认参数 rest 和展开 块作用域17、var,let和const的区别是什么？ 全局作用域下var声明的变量会挂载在window上，而let和const声明的变量不会 var声明变量存在变量提升，let和const不存在变量提升 let和const声明形成块作用域 同一作用域下let和const不能声明同名变量，而var可以 暂存死区 const 一旦声明必须赋值,不能使用null占位。 声明后不能再修改 如果声明的是复合类型数据，可以修改其属性 18、什么是箭头函数？ 箭头函数表达式的语法比函数表达式更简洁 没有自己的this，arguments，super或new.target 不能用作构造函数19、什么是类？类(class)是在 JS 中编写构造函数的新方法。它是使用构造函数的语法糖，在底层中使用仍然是原型和基于原型的继承。20、什么是 ES6 模块？ es5 commonjs：module.exports&#x2F;exports[prop]导出，require导入 es6 模块：export default&#x2F;export 导出，import导入21、什么是Set对象，它是如何工作的？Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用 add方法：向Set实例中添加一个新值 has方法：检查Set实例中是否存在特定的值。 size属性：获得Set实例的长度 clear方法：清楚Set实例的数据 由于存储的是唯一值，传入数组，可以对数组去重22、Promise 是什么？promise是异步编程的一种解决方案，从语法上讲，promise是一个对象有三种状态，状态一旦改变，就不会再变 pending(等待态） fulfiled(成功态) rejected(失败态) 创造promise实例后，它会立即执行。 23、什么是 async/await 及其如何工作？async&#x2F;await是 JS 中编写异步或非阻塞代码的新方法。它建立在Promises之上，让异步代码的可读性和简洁度都更高。 使用 async关键声明函数会隐式返回一个Promise await关键字只能在async function中使用。在任何非async function的函数中使用await关键字都会抛出错误。await关键字在执行下一行代码之前等待右侧表达式(可能是一个Promise)返回。24、展开(spread )运算符和 剩余(Rest) 运算符有什么区别？ 25、什么是包装对象（wrapper object）？JS数据类型被分为两大类，基本类型和引用类型。 基本类型：Undefined,Null,Boolean,Number,String,Symbol,BigInt 引用类型：Object,Array,Date,RegExp等，说白了就是对象。 除null和undefined之外的每个基本类型都有自己包装对象。 26、什么是NaN？以及如何检查值是否为NaN？NaN表示“非数字”是 JS 中的一个值，该值是将数字转换或执行为非数字值的运算结果，因此结果为NaN 在 JS 中，NaN是唯一的值，它不等于自己 JS 有一个内置的isNaN方法，用于测试值是否为isNaN值，但是这个函数有一个奇怪的行为，建议使用Number.isNaN 可以使用自己的辅助函数： 27、如何检查对象中是否存在某个属性 使用in操作符，包括原型上的属性 hasOwnProperty 方法：对象自身的属性，不包括原型上的 obj[pro]为undefined则不存在28、函数表达式和函数声明之间有什么区别？函数声明会将函数提升到作用域的顶部，函数表达式不会 29、new 关键字有什么作用？new关键字做了4件事: 创建空对象 &#123;&#125; 将空对象分配给 this 值 将空对象的proto指向构造函数的prototype 如果没有使用显式return语句，则返回this 看下面事例： 根据上面描述的，new Person()做了： 创建一个空对象：var obj = &#123;&#125; 将空对象分配给 this 值：this = obj 将空对象的proto__指向构造函数的prototype：this.__proto = Person().prototype 返回this: return this "},{"title":"前端干货","date":"2022-04-22T03:57:19.000Z","url":"/blog/2022/04/22/good/","tags":[["javascript","/blog/tags/javascript/"],["干货","/blog/tags/%E5%B9%B2%E8%B4%A7/"]],"categories":[["javascript","/blog/categories/javascript/"]],"content":"技能面试题：高级程序设计第4版.pdf每天往前一小步"},{"title":"flutter填坑记","date":"2022-04-21T09:45:15.000Z","url":"/blog/2022/04/21/flutterProblem/","tags":[["flutter","/blog/tags/flutter/"],["dart","/blog/tags/dart/"]],"categories":[["flutter","/blog/categories/flutter/"]],"content":"1、environment: sdk: “&gt;&#x3D;2.12.0 &lt;3.0.0”该版本默认开启了空安全校验假如有包不支持空安全在flutter run时会报错： Cannot run with sound null safety, because the following dependencies don’t support null safety 解决方案： 增加参数： –no-sound-null-safety 2、图片路径配置时，只支持当前文件夹下的图片，读取不到子文件夹的图片 3、bottomNavigationBar设置4个及更多会变白色 解决方案： BottomNavigationBar的type设置BottomNavigationBarType.fixed 4、AppBar的titleTextStyle不生效 解决方案： AppBar设置backwardsCompatibility: false, 5、AppBar的leading换行 解决方案： AppBar设置leadingWidth: 200 6、http中文乱码 解决方案： 7、http的headers加上’content-type’: ‘application&#x2F;json;charset&#x3D;UTF-8’时需要对post请求body进行jsonEncode 解决方案： 8、主题色primarySwatch接收的是MaterialColor，自定义16进制颜色需要自己实现转换返回MaterialColor 解决方案： 9、http拦截需要无context转跳 解决方案： 利用GlobalKey绑定在MaterialApp的navigatorKey上进行转跳代码： "},{"title":"快速搭建博客","date":"2022-04-21T08:26:16.000Z","url":"/blog/2022/04/21/buildBlog/","tags":[["快速搭建博客","/blog/tags/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"],["教程文档","/blog/tags/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"categories":[["教程文档","/blog/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"现成框架hexo文档地址：、安装hexo-cli 2、创建项目 生成的是默认的主题，可自行更换主题， 3、生成新文章 即可生成新文章，可在source目录下找到对应title名字的md文件，自行编辑即可，想了解更详细可访问文档 4、把博客放到GitPage 1）、修改_config.yml的url为gitpage的url 2）、把img的url改成相对路径 md文件顶部基本属性： 推荐主题： 该主题自带鼠标点击效果 "},{"title":"flutter","date":"2022-04-21T08:07:38.000Z","url":"/blog/2022/04/21/flutter/","tags":[["flutter","/blog/tags/flutter/"],["dart","/blog/tags/dart/"]],"categories":[["flutter","/blog/categories/flutter/"]],"content":"基础入门dart：类型： num、int、double、String、void、dynamic、set、list、map（Numbers、Strings、Booleans、Lists、Sets、Maps、Runes、Symbels、null）定义变量： var、const、final字符串插值： $变量、$&#123;变量&#125;?./??/泛型/minxins、 空安全：1、可空（?）类型的使用： 我们可以通过将?跟在类型的后面来表示它后面的变量或参数可接受Null： 对于可空的变量或参数在使用的时候需要通过Dart 的避空运算符?.来进行访问，否则会抛出编译错误。2、当程序启用空安全后，类的成员变量默认是不可空的，所以对于一个非空的成员变量需要指定其初始化方式： 3、延迟初始化（late）的使用对于无法在定义时进行初始化，并且又想避免使用?.，那么延迟初始化可以帮到你。通过late修饰的变量，可以让开发者选择初始化的时机，并且在使用这个变量时可以不用?.。 延时初始化虽然能为我们编码带来一定便利，但如果使用不当会带来空异常的问题，所以在使用的时候一定保证赋值和访问的顺序，切莫颠倒。4、State的空安全适配State的空安全适配主要是根据它的成员变量是否可空进行分类： 可空的变量：通过?进行修饰不可空的变量：可采用以下两种方式进行适配定义时初始化使用late修饰为延时变量 flutter 组件库： 中文书：  功能例子： 组件： 属性： &#x3D;&#x3D;&#x3D;状态组件： &#x3D;&#x3D;&#x3D;布局相关组件 &#x3D;&#x3D;&#x3D;app组件： &#x3D;&#x3D;&#x3D;页面组件： &#x3D;&#x3D;&#x3D;顶部导航： &#x3D;&#x3D;&#x3D;span： &#x3D;&#x3D;&#x3D;button: &#x3D;&#x3D;&#x3D; form表单： 表单提交： Image swiper: flex: flutter路由： fluter 事件 图片资源 打开第三方App 生命周期 &#x2F;&#x2F; 应用生命周期进入前台进入后台挂起 动态修改主题 自定义字体 选择手机图片 使用包： image_picker &#x2F;&#x2F; 需要兼容Android X配置 轮播swiper http网络请求 使用包： http、dart:convert 异步： Future、FutureBuilder 加载中…loading Widget: CircularProgressIndicator shared_preferences本地存储 Toast 提示 解决中文乱码 ListView 水平滚动 下拉刷新上拉加载功能 上拉加载： ExpansionTile展开收起效果组件 GridView 网格布局 复制到粘贴板 uri转义空格、&amp;、#等 时间 DateTime 时间选择 showDatePicker 返回DateTime 时间范围选择 showDateRangePicker返回DateRangerTime取start和end属性是DateTime类型 toast、loading包： flutter_easyloading lading组件包： m_loading、flutter_spinkit 中文配置 手机语言设置成中文即可显示中文 页面缓存 屏幕适配 flutter_screenutil table只加内部边框，用Container包一下可以给table加上borderRadius drawer 侧边弹出框 表单 多选框 下拉框 输入框 flutter_picker 选择器 base46图片 dart 定时器 "}]